<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AuthUserRoleMapper">
         <resultMap id="BaseResultMap" type="com.linwang.entity.AuthUserRole" extends="associationMap">
			<id column="id" property="id" />
			<result column="role_id" property="roleId" />
			<result column="user_id" property="userId" />
		 </resultMap>
		 <sql id="Base_Column_List" >
				`id`,
	            `role_id`,
	            `user_id`
	            
		 </sql>
		 <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		    SELECT 
		    <include refid="Base_Column_List" />
		    FROM `auth_user_role`
		    WHERE `id` = #{id}
		  </select>
		  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
		    SELECT 
		    <include refid="Base_Column_List" />
		    FROM `auth_user_role`
		    <include refid="map_params_where_condition" />
			<if test="orderBy == null" >
		      ORDER BY `id` DESC
		    </if>
		    <if test="orderBy != null" >
		      ORDER BY ${orderBy}
		    </if>
			LIMIT 1
		  </select>
		  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
		    SELECT ${aggregate_sql} FROM `auth_user_role`
		    <include refid="map_params_where_condition" />
		  </select>
		  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
		    DELETE FROM `auth_user_role`
		    WHERE `id` = #{id}
		  </delete>
         <insert id="insertAuthUserRole" parameterType="com.linwang.entity.AuthUserRole">
         	 <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
		      SELECT LAST_INSERT_ID()
		     </selectKey>
             insert into `auth_user_role`(
	             `role_id`,
	             `user_id`
	             
             ) 
	         values 
	         (
				 #{roleId},
				 #{userId}	         	
		      )    
	      </insert>
	      <insert id="insertSelective" parameterType="com.linwang.entity.AuthUserRole" >
			    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
			      SELECT LAST_INSERT_ID()
			    </selectKey>
			    INSERT INTO `auth_user_role`
			    <trim prefix="(" suffix=")" suffixOverrides="," >
		              <if test="roleId!= null" >
						`role_id`,
					  </if>
		              <if test="userId!= null" >
						`user_id`,
					  </if>
			    </trim>
			    <trim prefix="values (" suffix=")" suffixOverrides="," >
		         	   <if test="roleId != null" >
						#{roleId},
					   </if>
		         	   <if test="userId != null" >
						#{userId},
					   </if>
			    </trim>
		  </insert>
          <update id="updateByPrimaryKeySelective" parameterType="com.linwang.entity.AuthUserRole" >
			UPDATE `auth_user_role`
			<set >
		         <if test="roleId != null" >
					`role_id` = #{roleId},
			  	 </if>	
		         <if test="userId != null" >
					`user_id` = #{userId},
			  	 </if>	
			</set>
			WHERE `id` = #{id}
		  </update>
		  <update id="updateByPrimaryKey" parameterType="com.linwang.entity.AuthUserRole" >
			UPDATE `auth_user_role` SET
					`role_id` = #{roleId},
					`user_id` = #{userId}
	         		
			WHERE `id` = #{id}
		  </update>
		  <update id="updateByCondition" parameterType="java.util.Map" >
			UPDATE `auth_user_role`
			<set>
		         <if test="entity.roleId != null" >
					`role_id` = #{entity.roleId},
			  	 </if>	
		         <if test="entity.userId != null" >
					`user_id` = #{entity.userId},
			  	 </if>	
			</set>
			<include refid="map_params_where_condition" />
		  </update>
		  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
			UPDATE `auth_user_role`
			<set>
			  <foreach collection="increateNumbers" item="numberCloums">
				`${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
			  </foreach>
			</set>
			<include refid="map_params_where_condition" />
		  </update>
		  <sql id="map_params_where_condition" >
		    <trim prefix="WHERE" prefixOverrides="AND">
		    	<if test="id != null" >
			       AND `id` = #{id}
			    </if>
		      	<if test="roleId != null" >
			       AND `role_id` = #{roleId}
			    </if>
		      	<if test="userId != null" >
			       AND `user_id` = #{userId}
			    </if>
			  <if test="condition != null">
				  <if test="condition.roleId != null" >
			        AND `role_id` = #{condition.roleId}
				  </if>
				  <if test="condition.userId != null" >
			        AND `user_id` = #{condition.userId}
				  </if>
			  </if>
			  <if test="vo != null and !vo.expressionChainList.empty">
		        AND
		        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
		          <if test="!expressionChain.expressionList.empty">
		            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
		              <choose>
		                <when test="expression.type == 0">
		                  `${expression.column}` ${expression.operator}
		                </when>
		                <when test="expression.type == 1">
		                  `${expression.column}` ${expression.operator} #{expression.value}
		                </when>
		                <when test="expression.type == 2">
		                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
		                </when>
		                <when test="expression.type == 3">
		                  `${expression.column}` ${expression.operator}
		                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
							#{value}		                     
		                  </foreach>
		                </when>
		              </choose>
		            </foreach>
		          </if>
		        </foreach>
		      </if>
		      <if test="expressionChainList != null and !expressionChainList.empty">
		        AND
		        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
		          <if test="!expressionChain.expressionList.empty">
		            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
		              <choose>
		                <when test="expression.type == 0">
		                  `${expression.column}` ${expression.operator}
		                </when>
		                <when test="expression.type == 1">
		                  `${expression.column}` ${expression.operator} #{expression.value}
		                </when>
		                <when test="expression.type == 2">
		                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
		                </when>
		                <when test="expression.type == 3">
		                  `${expression.column}` ${expression.operator}
		                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
							#{value}		                     
		                  </foreach>
		                </when>
		              </choose>
		            </foreach>
		          </if>
		        </foreach>
		      </if>
		    </trim>
		 </sql>
         <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
		    SELECT
		    <include refid="Base_Column_List" />
		    FROM `auth_user_role`
		    <include refid="map_params_where_condition" />
		    <if test="orderBy == null" >
		      ORDER BY `id` DESC
		    </if>
		    <if test="orderBy != null" >
		      ORDER BY ${orderBy}
		    </if>
		    <if test="pageBeginIndex != null and pageSize != null" >
		      LIMIT #{pageBeginIndex},#{pageSize}
		    </if>
		    <if test="pageBeginIndex == null and pageSize != null" >
		      LIMIT #{pageSize}
		    </if>
		    <if test="pageBeginIndex != null and pageSize == null" >
		      LIMIT #{pageBeginIndex}
		    </if>
		  </select>
		  <delete id="delete" parameterType="java.util.Map" >
		    DELETE
		    FROM `auth_user_role`
		    <include refid="map_params_where_condition" />
		  </delete>
		  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
		    SELECT COUNT(id)
		    FROM `auth_user_role`
		    <include refid="map_params_where_condition" />
		  </select>
</mapper>
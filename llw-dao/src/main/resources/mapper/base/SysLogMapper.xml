<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SysLogMapper">
         <resultMap id="BaseResultMap" type="com.linwang.entity.SysLog" extends="associationMap">
			<id column="id" property="id" />
			<result column="module_type" property="moduleType" />
			<result column="oprate_type" property="oprateType" />
			<result column="name" property="name" />
			<result column="uri" property="uri" />
			<result column="msg" property="msg" />
			<result column="adminName" property="adminName" />
			<result column="ip" property="ip" />
			<result column="date_add" property="dateAdd" />
		 </resultMap>
		 <sql id="Base_Column_List" >
				`id`,
	            `module_type`,
	            `oprate_type`,
	            `name`,
	            `uri`,
	            `msg`,
	            `adminName`,
	            `ip`,
	            `date_add`
	            
		 </sql>
		 <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		    SELECT 
		    <include refid="Base_Column_List" />
		    FROM `sys_log`
		    WHERE `id` = #{id}
		  </select>
		  <select id="getByCondition" resultMap="BaseResultMap" parameterType="java.util.Map" >
		    SELECT 
		    <include refid="Base_Column_List" />
		    FROM `sys_log`
		    <include refid="map_params_where_condition" />
			<if test="orderBy == null" >
		      ORDER BY `id` DESC
		    </if>
		    <if test="orderBy != null" >
		      ORDER BY ${orderBy}
		    </if>
			LIMIT 1
		  </select>
		  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.Map">
		    SELECT ${aggregate_sql} FROM `sys_log`
		    <include refid="map_params_where_condition" />
		  </select>
		  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
		    DELETE FROM `sys_log`
		    WHERE `id` = #{id}
		  </delete>
         <insert id="insertSysLog" parameterType="com.linwang.entity.SysLog">
         	 <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
		      SELECT LAST_INSERT_ID()
		     </selectKey>
             insert into `sys_log`(
	             `module_type`,
	             `oprate_type`,
	             `name`,
	             `uri`,
	             `msg`,
	             `adminName`,
	             `ip`,
	             `date_add`
	             
             ) 
	         values 
	         (
				 #{moduleType},
				 #{oprateType},
				 #{name},
				 #{uri},
				 #{msg},
				 #{adminName},
				 #{ip},
				 #{dateAdd}	         	
		      )    
	      </insert>
	      <insert id="insertSelective" parameterType="com.linwang.entity.SysLog" >
			    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
			      SELECT LAST_INSERT_ID()
			    </selectKey>
			    INSERT INTO `sys_log`
			    <trim prefix="(" suffix=")" suffixOverrides="," >
		              <if test="moduleType!= null" >
						`module_type`,
					  </if>
		              <if test="oprateType!= null" >
						`oprate_type`,
					  </if>
		              <if test="name!= null" >
						`name`,
					  </if>
		              <if test="uri!= null" >
						`uri`,
					  </if>
		              <if test="msg!= null" >
						`msg`,
					  </if>
		              <if test="adminName!= null" >
						`adminName`,
					  </if>
		              <if test="ip!= null" >
						`ip`,
					  </if>
		              <if test="dateAdd!= null" >
						`date_add`,
					  </if>
			    </trim>
			    <trim prefix="values (" suffix=")" suffixOverrides="," >
		         	   <if test="moduleType != null" >
						#{moduleType},
					   </if>
		         	   <if test="oprateType != null" >
						#{oprateType},
					   </if>
		         	   <if test="name != null" >
						#{name},
					   </if>
		         	   <if test="uri != null" >
						#{uri},
					   </if>
		         	   <if test="msg != null" >
						#{msg},
					   </if>
		         	   <if test="adminName != null" >
						#{adminName},
					   </if>
		         	   <if test="ip != null" >
						#{ip},
					   </if>
		         	   <if test="dateAdd != null" >
						#{dateAdd},
					   </if>
			    </trim>
		  </insert>
          <update id="updateByPrimaryKeySelective" parameterType="com.linwang.entity.SysLog" >
			UPDATE `sys_log`
			<set >
		         <if test="moduleType != null" >
					`module_type` = #{moduleType},
			  	 </if>	
		         <if test="oprateType != null" >
					`oprate_type` = #{oprateType},
			  	 </if>	
		         <if test="name != null" >
					`name` = #{name},
			  	 </if>	
		         <if test="uri != null" >
					`uri` = #{uri},
			  	 </if>	
		         <if test="msg != null" >
					`msg` = #{msg},
			  	 </if>	
		         <if test="adminName != null" >
					`adminName` = #{adminName},
			  	 </if>	
		         <if test="ip != null" >
					`ip` = #{ip},
			  	 </if>	
		         <if test="dateAdd != null" >
					`date_add` = #{dateAdd},
			  	 </if>	
			</set>
			WHERE `id` = #{id}
		  </update>
		  <update id="updateByPrimaryKey" parameterType="com.linwang.entity.SysLog" >
			UPDATE `sys_log` SET
					`module_type` = #{moduleType},
					`oprate_type` = #{oprateType},
					`name` = #{name},
					`uri` = #{uri},
					`msg` = #{msg},
					`adminName` = #{adminName},
					`ip` = #{ip},
					`date_add` = #{dateAdd}
	         		
			WHERE `id` = #{id}
		  </update>
		  <update id="updateByCondition" parameterType="java.util.Map" >
			UPDATE `sys_log`
			<set>
		         <if test="entity.moduleType != null" >
					`module_type` = #{entity.moduleType},
			  	 </if>	
		         <if test="entity.oprateType != null" >
					`oprate_type` = #{entity.oprateType},
			  	 </if>	
		         <if test="entity.name != null" >
					`name` = #{entity.name},
			  	 </if>	
		         <if test="entity.uri != null" >
					`uri` = #{entity.uri},
			  	 </if>	
		         <if test="entity.msg != null" >
					`msg` = #{entity.msg},
			  	 </if>	
		         <if test="entity.adminName != null" >
					`adminName` = #{entity.adminName},
			  	 </if>	
		         <if test="entity.ip != null" >
					`ip` = #{entity.ip},
			  	 </if>	
		         <if test="entity.dateAdd != null" >
					`date_add` = #{entity.dateAdd},
			  	 </if>	
			</set>
			<include refid="map_params_where_condition" />
		  </update>
		  <update id="updateIncreateNumbers" parameterType="java.util.Map" >
			UPDATE `sys_log`
			<set>
			  <foreach collection="increateNumbers" item="numberCloums">
				`${numberCloums.column}` = `${numberCloums.column}` + #{numberCloums.number},
			  </foreach>
			</set>
			<include refid="map_params_where_condition" />
		  </update>
		  <sql id="map_params_where_condition" >
		    <trim prefix="WHERE" prefixOverrides="AND">
		    	<if test="id != null" >
			       AND `id` = #{id}
			    </if>
		      	<if test="moduleType != null" >
			       AND `module_type` = #{moduleType}
			    </if>
		      	<if test="oprateType != null" >
			       AND `oprate_type` = #{oprateType}
			    </if>
		      	<if test="name != null" >
			       AND `name` = #{name}
			    </if>
		      	<if test="uri != null" >
			       AND `uri` = #{uri}
			    </if>
		      	<if test="msg != null" >
			       AND `msg` = #{msg}
			    </if>
		      	<if test="adminName != null" >
			       AND `adminName` = #{adminName}
			    </if>
		      	<if test="ip != null" >
			       AND `ip` = #{ip}
			    </if>
		      	<if test="dateAdd != null" >
			       AND `date_add` = #{dateAdd}
			    </if>
			  <if test="condition != null">
				  <if test="condition.moduleType != null" >
			        AND `module_type` = #{condition.moduleType}
				  </if>
				  <if test="condition.oprateType != null" >
			        AND `oprate_type` = #{condition.oprateType}
				  </if>
				  <if test="condition.name != null" >
			        AND `name` = #{condition.name}
				  </if>
				  <if test="condition.uri != null" >
			        AND `uri` = #{condition.uri}
				  </if>
				  <if test="condition.msg != null" >
			        AND `msg` = #{condition.msg}
				  </if>
				  <if test="condition.adminName != null" >
			        AND `adminName` = #{condition.adminName}
				  </if>
				  <if test="condition.ip != null" >
			        AND `ip` = #{condition.ip}
				  </if>
				  <if test="condition.dateAdd != null" >
			        AND `date_add` = #{condition.dateAdd}
				  </if>
			  </if>
			  <if test="vo != null and !vo.expressionChainList.empty">
		        AND
		        <foreach collection="vo.expressionChainList" item="expressionChain" separator="OR">
		          <if test="!expressionChain.expressionList.empty">
		            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
		              <choose>
		                <when test="expression.type == 0">
		                  `${expression.column}` ${expression.operator}
		                </when>
		                <when test="expression.type == 1">
		                  `${expression.column}` ${expression.operator} #{expression.value}
		                </when>
		                <when test="expression.type == 2">
		                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
		                </when>
		                <when test="expression.type == 3">
		                  `${expression.column}` ${expression.operator}
		                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
							#{value}		                     
		                  </foreach>
		                </when>
		              </choose>
		            </foreach>
		          </if>
		        </foreach>
		      </if>
		      <if test="expressionChainList != null and !expressionChainList.empty">
		        AND
		        <foreach collection="expressionChainList" item="expressionChain" separator="OR">
		          <if test="!expressionChain.expressionList.empty">
		            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
		              <choose>
		                <when test="expression.type == 0">
		                  `${expression.column}` ${expression.operator}
		                </when>
		                <when test="expression.type == 1">
		                  `${expression.column}` ${expression.operator} #{expression.value}
		                </when>
		                <when test="expression.type == 2">
		                  `${expression.column}` ${expression.operator} #{expression.value} AND #{expression.value1}
		                </when>
		                <when test="expression.type == 3">
		                  `${expression.column}` ${expression.operator}
		                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
							#{value}		                     
		                  </foreach>
		                </when>
		              </choose>
		            </foreach>
		          </if>
		        </foreach>
		      </if>
		    </trim>
		 </sql>
         <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map" >
		    SELECT
		    <include refid="Base_Column_List" />
		    FROM `sys_log`
		    <include refid="map_params_where_condition" />
		    <if test="orderBy == null" >
		      ORDER BY `id` DESC
		    </if>
		    <if test="orderBy != null" >
		      ORDER BY ${orderBy}
		    </if>
		    <if test="pageBeginIndex != null and pageSize != null" >
		      LIMIT #{pageBeginIndex},#{pageSize}
		    </if>
		    <if test="pageBeginIndex == null and pageSize != null" >
		      LIMIT #{pageSize}
		    </if>
		    <if test="pageBeginIndex != null and pageSize == null" >
		      LIMIT #{pageBeginIndex}
		    </if>
		  </select>
		  <delete id="delete" parameterType="java.util.Map" >
		    DELETE
		    FROM `sys_log`
		    <include refid="map_params_where_condition" />
		  </delete>
		  <select id="getCount" resultType="java.lang.Integer" parameterType="java.util.Map" >
		    SELECT COUNT(id)
		    FROM `sys_log`
		    <include refid="map_params_where_condition" />
		  </select>
</mapper>